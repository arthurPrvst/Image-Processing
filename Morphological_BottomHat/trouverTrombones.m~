%programme pas comtinuer
% raison: modif rendre les threshold inutile
% unique changement dans : find_color(hsvXbin,BinImage)
% testage de: compare_V_vs_BG(BW,HSVImage) 


%rouge, jaune, vert, bleu, mauve, rose et fuck Blanc-> saturation =0
function [x,y,z]=trouverTrombones(images)
%all the same image
RGBImage = imread(images);
GrayImage=rgb2gray(RGBImage);
%HSVImage=rgb2hsv(decorrstretch(RGBImage));
HSVImage=rgb2hsv(RGBImage);
BinImage=remplirtrbn(GrayImage,HSVImage);

hsvXbin=HSVImage.*double(BinImage>0);

%subplot(2,2,1),imshow(BinImage);
%subplot(2,2,2),imshow(hsv2rgb(hsvXbin));
%subplot(2,2,4),imshow(rbgXbin);%histogram(RGBImage(BinImage));
find_color(hsvXbin,BinImage);

x=0;
y=0;
z=0;
end

function fulltrbn = remplirtrbn(Grayimage,HSVImage)
SE=strel('disk',25);

Grayimage2 = imbothat(Grayimage,SE);%me
test = Grayimage2.*HSVImage;


B = imgaussfilt(Grayimage2,1); %me
BW0=fibermetric(B);
% potential alternative for fibermatric-> 'rangefilt(B)' might be faster...
BW1=logical(BW0>0.05); % create PC without hole as a comparision

BW2=bwareaopen(imfill(BW1,'holes'),300); % remove noise from the shade, PC >>3000
BW3=imclose(BW2,SE);
BW3=imfill(BW3,'holes');
BW4=BW0 & BW3; %recreate the outline of PC
BW5=uint8(BW4).*B;
BW6=fibermetric(BW5);
BW7=imgradient(BW0);


%TEST1 
%BW5=imclose(BW4,strel('disk',20));
%clear false true from the shade on the border of the image
%BW6=imclearborder(BW2);

%fill only the PC
%BW7=BW6;

%TEST1

figure(1);
subplot(2,2,1),imshow(BW0),title('BW0');
subplot(2,2,2),imshow(BW1),title('BW1');
subplot(2,2,3),imshow(BW2),title('BW2');
subplot(2,2,4),imshow(BW3),title('BW3');
figure(2);
subplot(2,2,1),imshow(BW4),title('BW4');
subplot(2,2,2),imshow(BW5),title('BW5');
subplot(2,2,3),imshow(BW6),title('BW6');
subplot(2,2,4),imshow(BW7),title('BW7');
figure(3); %me
subplot(2,2,1),imshow(Grayimage2),title('Bottom HAT'); %ME
subplot(2,2,2),imshow(test),title('Bottom HAT*HSVImage'); %ME

fulltrbn=bwlabel(BW4);

end

function find_color(hsvXbin,BinImage)
BinImage_end=BinImage;
nb_area=max(BinImage(:));


for area=1:nb_area
    %isolate a area
    hsvXarea=hsvXbin.*(BinImage==area);
    %check for white
    whiteTH=0.2;
    hsvXarea_W=hsvXarea(:,:,1).*(hsvXarea(:,:,2)<whiteTH).*(hsvXarea(:,:,3)>1-whiteTH);
    subplot(2,2,3);
    Hist_W=histogram(nonzeros(hsvXarea_W(:,:,1)),'BinWidth',15/360);
    
    
    %eliminate low saturation
    hsvXarea_NoW=hsvXarea(:,:,1).*(hsvXarea(:,:,2)>whiteTH);
    
    %else check for color
    %rouge, jaune, vert, bleu, mauve, rose
    subplot(2,2,2),imshow(hsv2rgb(hsvXarea));
    %histogram of color without white
    subplot(2,2,4);
    hist=histogram(nonzeros(hsvXarea_NoW(:,:,1)),'BinWidth',10/360);
    %because it's on 360 degree the 0 and 360 have an impact on each other
    histdata=hist.Values;
    histdata=horzcat(histdata(length(histdata)),histdata,histdata(1));
    bar(histdata);
    [pks,locs]=findpeaks(histdata);
    
    %threshold
    noise_TH=0.9*10^4;
    moreOF2=6.7*10^4; %average for 1 paperclip of color
    
    %number of paperclip in each section
    nb_noise=sum(uint8(0<pks & pks<noise_TH));
    
    %confirm that if any white in noise with Hist_W
    %%%%%%%%%%%%%%%%% what %%%%%%%
    
    %number of unique PC
    filt1=double(noise_TH<pks & pks<=moreOF2);
    nb_ones=sum(filt1);
    pks_filtered=filt1.*pks;
    locs_filtered=filt1.*locs;
    %number of multipl (of same color) PC
    filt2=uint8(moreOF2<pks); %filter
    nb_twos=sum(filt2);
    %total paperclip
    nbPCS=nb_ones+2*nb_twos;
    
    %sub divide paperclips
    if 0 %nbPCS>1
        sub_area=split_area(BinImage==area,nbPCS);
        %take the basic template
        %remove the false cluster
        %add the multiple simple cluster
        %add after the last simple cluster
        BinImage_end = BinImage_end-(BinImage==area)+sub_area+max(BinImage_end(:));
    end
    color_code(locs_filtered);
end
end

%color code
%locs_filtered=localisation filtered (only the good unique value) to 15
function color_code(locs_filtered)
l=sum(locs_filtered);

%rouge, jaune, vert, bleu, mauve, rose et fuck Blanc-> saturation =0

if 0<l && l<=5
    %rouge
    disp('rouge')
elseif 5<l && l<=13
    %jaune
    disp('jaune')
elseif 13<l && l<=21
    %vert
    disp('vert')
elseif 21<l && l<=26
    %bleu
    disp('bleu')
elseif 26<l && l<=33
    %mauve
    disp('mauve')
elseif 33<l && l<=36
    %%rose
    disp('rose')
elseif 36<l
    %rouge 2
    %one faulty pink
    disp('rouge')
end

end
function color_code15(locs_filtered)
l=sum(locs_filtered);

%rouge, jaune, vert, bleu, mauve, rose et fuck Blanc-> saturation =0

if 0<l && l<=3
    %rouge
    disp('rouge')
elseif 3<l && l<=9
    %jaune
    disp('jaune')
elseif 9<l && l<=14
    %vert
    disp('vert')
elseif 14<l && l<=17
    %bleu
    disp('bleu')
elseif 17<l && l<=22
    %mauve
    disp('mauve')
elseif 22<l && l<=24
    %%rose
    disp('rose')
elseif 24<l
    %rouge 2
    %one faulty pink
    disp('rouge')
end

end


function  sub_area=split_area(bin_area,nbPCS)
L_fill=imfill(bin_area,'holes');
L_hole=L_fill-bin_area;
SE_dil = strel('disk',2);
SE_ero = strel('disk',3);
test=0;
while max(max(bwlabel(L_hole)))~=nbPCS
    L_hole=imdilate(L_hole,SE_dil);
    
    if max(max(bwlabel(L_hole)))<5
        L_hole=imerode(L_hole,SE_ero);
        test=test+1;
    end
    
    if test>5
        subplot(2,2,1),imshow(L_hole);
    end
end

%dilate till all the paperclip have a appropriate region
L_region=bwlabel(L_hole)+1;
while sum(sum(L_region==1))~=0
    L_region=imdilate(L_region,SE_dil);
    L_region=L_region.*logical(L_fill);
end

%redefine the real PC with the appropriate region
L_PC=logical(bin_area).*L_region;
figure(2);
subplot(2,2,2),imshow(bin_area);
subplot(2,2,3),imshow(L_hole);
subplot(2,2,4),imshow(L_PC,[min(L_PC(:)),max(L_PC(:))]);

%remove 1 that come from the algorithm 1 is consider as not treated
sub_area=L_PC-1;
end

function threed_density(PC_area_HSV)
x=PC_area_HSV(:,:,1);
y=PC_area_HSV(:,:,2);
z=PC_area_HSV(:,:,3);

display_threed_density(x,y,z);
end
%CAN'T and WONT be used in the program
%come from:
%https://www.mathworks.com/matlabcentral/answers/110977-3d-density-plot-multiple-isosurfaces-on-the-same-plot
function display_threed_density(x,y,z)
figure
      quantum=max(nfe)/8;
      isovalue=6*quantum;
      surf1=isosurface(x,y,z,normalized_Free_Energy_map,isovalue);
      p1 = patch(surf1);
      isonormals(x,y,z,normalized_Free_Energy_map,p1);
      set(p1,'FaceColor','red','EdgeColor','none','FaceAlpha',0.1); % set the color, mesh and transparency level of the surface
      daspect([1,1,1])
      view(3); axis tight
      camlight; lighting gouraud
      isovalue=4*quantum;
      surf2=isosurface(x,y,z,normalized_Free_Energy_map,isovalue);
      p2 = patch(surf2);
      isonormals(x,y,z,normalized_Free_Energy_map,p2);
      set(p2,'FaceColor','yellow','EdgeColor','none','FaceAlpha',0.2);
      isovalue=2*quantum;
      surf3=isosurface(x,y,z,normalized_Free_Energy_map,isovalue);
      p3 = patch(surf3);
      isonormals(x,y,z,normalized_Free_Energy_map,p3);
      set(p3,'FaceColor','cyan','EdgeColor','none','FaceAlpha',0.3);
      isovalue=quantum;
      surf4=isosurface(x,y,z,normalized_Free_Energy_map,isovalue);
      p4 = patch(surf4);
      isonormals(x,y,z,normalized_Free_Energy_map,p4);
      set(p4,'FaceColor','blue','EdgeColor','none','FaceAlpha',1);
end


%NOT IN USED. compare the H V S parameters of the background vs the PC 
function compare_V_vs_BG(BW,HSVImage)
ima=BW.*HSVImage;
ima=((ima==0).*-1)+ima;
ima1=ima(:,:,1);
ima1_TH=ima1>0;
ima2=ima(:,:,2);
ima2_TH=ima2>0;
ima3=ima(:,:,3);
ima3_TH=ima3>0;

figure(2);
histogram(ima1(ima1_TH),'FaceAlpha',0.3,'FaceColor','red','EdgeAlpha',0.3, 'EdgeColor','red','BinLimits',[0,1],'Normalization','probability');
hold on;
histogram(ima2(ima2_TH),'FaceAlpha',0.3,'FaceColor','blue','EdgeAlpha',0.3, 'EdgeColor','blue','BinLimits',[0,1],'Normalization','probability');
histogram(ima3(ima3_TH),'FaceAlpha',0.3,'FaceColor','green','EdgeAlpha',0.3, 'EdgeColor','green','BinLimits',[0,1],'Normalization','probability');
hold off;

BG=(1-BW).*HSVImage;
BG=((BG==0).*-1)+BG;
BG1=BG(:,:,1);
BG1_TH=BG1>0;
BG2=BG(:,:,2);
BG2_TH=BG2>0;
BG3=BG(:,:,3);
BG3_TH=BG3>0;

figure(3);
histogram(BG1(BG1_TH),'FaceAlpha',0.3,'FaceColor','Magenta','EdgeAlpha',0.3, 'EdgeColor','Magenta','BinLimits',[0,1],'Normalization','probability');
hold on;
histogram(BG2(BG2_TH),'FaceAlpha',0.3,'FaceColor','Cyan','EdgeAlpha',0.3, 'EdgeColor','Cyan','BinLimits',[0,1],'Normalization','probability');
histogram(BG3(BG3_TH),'FaceAlpha',0.3,'FaceColor','Yellow','EdgeAlpha',0.3, 'EdgeColor','Yellow','BinLimits',[0,1],'Normalization','probability');
hold off;
end